/* Generated By:JavaCC: Do not edit this line. AxionSqlParserTokenManager.java */
package org.axiondb.parser;

public class AxionSqlParserTokenManager implements AxionSqlParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2, long active3)
{
   switch (pos)
   {
      case 0:
         if ((active3 & 0x2L) != 0L)
            return 0;
         if ((active0 & 0xffffffffffffff80L) != 0L || (active1 & 0xffffffffffffffffL) != 0L || (active2 & 0xffffffffffL) != 0L)
         {
            jjmatchedKind = 172;
            return 42;
         }
         if ((active2 & 0x8000000000000L) != 0L)
            return 14;
         if ((active2 & 0x8000000000000000L) != 0L)
            return 6;
         return -1;
      case 1:
         if ((active0 & 0xb000000000046000L) != 0L || (active1 & 0x100001e60003fL) != 0L || (active2 & 0x1000018L) != 0L)
            return 42;
         if ((active0 & 0x4ffffffffffb9f80L) != 0L || (active1 & 0xfffeffffe19fffc0L) != 0L || (active2 & 0xfffeffffe7L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 172;
               jjmatchedPos = 1;
            }
            return 42;
         }
         return -1;
      case 2:
         if ((active0 & 0x18040100005280L) != 0L || (active1 & 0x20000400090L) != 0L || (active2 & 0x1308014L) != 0L)
            return 42;
         if ((active0 & 0x6fe7fbfefffb8d00L) != 0L || (active1 & 0xfffefdfff99fff4fL) != 0L || (active2 & 0xfffecf7febL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 172;
               jjmatchedPos = 2;
            }
            return 42;
         }
         return -1;
      case 3:
         if ((active0 & 0x6b97f8be3fd18d00L) != 0L || (active1 & 0x8ef27dfff90fe90fL) != 0L || (active2 & 0xeee7df3000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 172;
               jjmatchedPos = 3;
            }
            return 42;
         }
         if ((active0 & 0x4600340c02a0000L) != 0L || (active1 & 0x710c800000901650L) != 0L || (active2 & 0x1118004febL) != 0L)
            return 42;
         return -1;
      case 4:
         if ((active0 & 0x106000020408400L) != 0L || (active1 & 0x8e00480228088806L) != 0L || (active2 & 0xa40001000L) != 0L)
            return 42;
         if ((active2 & 0x4000000000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 172;
               jjmatchedPos = 4;
            }
            return 25;
         }
         if ((active0 & 0x6a91f8be5f910900L) != 0L || (active1 & 0xf235fdd1076109L) != 0L || (active2 & 0xb5afdf2200L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 172;
               jjmatchedPos = 4;
            }
            return 42;
         }
         return -1;
      case 5:
         if ((active0 & 0x200283001800900L) != 0L || (active1 & 0x4e004c801010008L) != 0L || (active2 & 0xa0000b2000L) != 0L)
            return 42;
         if ((active2 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 172;
            jjmatchedPos = 5;
            return 25;
         }
         if ((active0 & 0x6891d08e5e110000L) != 0L || (active1 & 0x123135d0066101L) != 0L || (active2 & 0x15afd40200L) != 0L)
         {
            jjmatchedKind = 172;
            jjmatchedPos = 5;
            return 42;
         }
         return -1;
      case 6:
         if ((active0 & 0x10c00200110000L) != 0L || (active1 & 0x201180004100L) != 0L || (active2 & 0x407d40000L) != 0L)
            return 42;
         if ((active0 & 0x6881108c5e000000L) != 0L || (active1 & 0x12112450062001L) != 0L || (active2 & 0x11a8000200L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 172;
               jjmatchedPos = 6;
            }
            return 42;
         }
         if ((active2 & 0x4000000000L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 172;
               jjmatchedPos = 6;
            }
            return 25;
         }
         return -1;
      case 7:
         if ((active0 & 0x1c000000L) != 0L || (active2 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 172;
            jjmatchedPos = 7;
            return 25;
         }
         if ((active0 & 0x801008440000000L) != 0L || (active1 & 0x12012040022000L) != 0L || (active2 & 0x20000000L) != 0L)
            return 42;
         if ((active2 & 0x4000000L) != 0L)
            return 25;
         if ((active0 & 0x6080100802000000L) != 0L || (active1 & 0x100410040001L) != 0L || (active2 & 0x1188000200L) != 0L)
         {
            jjmatchedKind = 172;
            jjmatchedPos = 7;
            return 42;
         }
         return -1;
      case 8:
         if ((active0 & 0x6080100000000000L) != 0L || (active1 & 0x100000000001L) != 0L || (active2 & 0x1080000200L) != 0L)
            return 42;
         if ((active0 & 0x1c000000L) != 0L || (active2 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 172;
            jjmatchedPos = 8;
            return 25;
         }
         if ((active0 & 0x802000000L) != 0L || (active1 & 0x410040000L) != 0L || (active2 & 0x108000000L) != 0L)
         {
            jjmatchedKind = 172;
            jjmatchedPos = 8;
            return 42;
         }
         return -1;
      case 9:
         if ((active0 & 0x802000000L) != 0L || (active1 & 0x400000000L) != 0L)
            return 42;
         if ((active1 & 0x10040000L) != 0L || (active2 & 0x108000000L) != 0L)
         {
            jjmatchedKind = 172;
            jjmatchedPos = 9;
            return 42;
         }
         if ((active0 & 0x1c000000L) != 0L || (active2 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 172;
            jjmatchedPos = 9;
            return 25;
         }
         return -1;
      case 10:
         if ((active1 & 0x40000L) != 0L || (active2 & 0x8000000L) != 0L)
            return 42;
         if ((active0 & 0x1c000000L) != 0L)
         {
            jjmatchedKind = 172;
            jjmatchedPos = 10;
            return 25;
         }
         if ((active2 & 0x4000000000L) != 0L)
            return 25;
         if ((active1 & 0x10000000L) != 0L || (active2 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 172;
            jjmatchedPos = 10;
            return 42;
         }
         return -1;
      case 11:
         if ((active1 & 0x10000000L) != 0L)
            return 42;
         if ((active2 & 0x100000000L) != 0L)
         {
            if (jjmatchedPos != 11)
            {
               jjmatchedKind = 172;
               jjmatchedPos = 11;
            }
            return 42;
         }
         if ((active0 & 0x1c000000L) != 0L)
            return 25;
         return -1;
      case 12:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 172;
            jjmatchedPos = 12;
            return 25;
         }
         if ((active2 & 0x100000000L) != 0L)
            return 42;
         return -1;
      case 13:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 172;
            jjmatchedPos = 13;
            return 25;
         }
         return -1;
      case 14:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 172;
            jjmatchedPos = 14;
            return 25;
         }
         return -1;
      case 15:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 172;
            jjmatchedPos = 15;
            return 25;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2, long active3)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2, active3), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x200000000000000L);
      case 34:
         return jjStopAtPos(0, 195);
      case 40:
         jjmatchedKind = 188;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x800000000000000L);
      case 41:
         return jjStopAtPos(0, 189);
      case 42:
         return jjStopAtPos(0, 190);
      case 43:
         return jjStopAtPos(0, 192);
      case 44:
         return jjStopAtPos(0, 176);
      case 45:
         return jjStartNfaWithStates_0(0, 193, 0);
      case 46:
         return jjStartNfaWithStates_0(0, 179, 14);
      case 47:
         return jjStartNfaWithStates_0(0, 191, 6);
      case 58:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x800000000000L);
      case 59:
         return jjStopAtPos(0, 178);
      case 60:
         jjmatchedKind = 180;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x420000000000000L);
      case 61:
         return jjStopAtPos(0, 184);
      case 62:
         jjmatchedKind = 182;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x80000000000000L);
      case 63:
         return jjStopAtPos(0, 194);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x7f80L, 0x0L, 0x0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x78000L, 0x0L, 0x42208cL);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x3ff80000L, 0x0L, 0x340L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x1ffc0000000L, 0x0L, 0x8000300400L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x1fe0000000000L, 0x0L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x7e000000000000L, 0x0L, 0x1000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0x180000000000000L, 0x0L, 0x0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x600000000000000L, 0x0L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0xf800000000000000L, 0x3fL, 0x201000010L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40L, 0x4000000000L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1f00L, 0x908004000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xfe000L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xf00000L, 0xc0000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3f000000L, 0x2000000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xc0000000L, 0x0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3e00000000L, 0x8020L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3fc000000000L, 0x60010000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1fc00000000000L, 0x1010800800L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3e0000000000000L, 0x0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1c00000000000000L, 0x486000000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xe000000000000000L, 0x1L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x2L);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x2000000000000L);
      default :
         return jjMoveNfa_0(5, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 43:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x800000000000000L);
      case 61:
         if ((active2 & 0x800000000000L) != 0L)
            return jjStopAtPos(1, 175);
         else if ((active2 & 0x20000000000000L) != 0L)
            return jjStopAtPos(1, 181);
         else if ((active2 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 183);
         else if ((active2 & 0x200000000000000L) != 0L)
            return jjStopAtPos(1, 185);
         break;
      case 62:
         if ((active2 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 186);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x2020001c0380000L, active1, 0xc00400000006000L, active2, 0x4c86008400L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x2000000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x100L, active1, 0L, active2, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000080L, active1, 0L, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x80007e00018000L, active1, 0x200003fc00108380L, active2, 0x10300022L);
      case 70:
      case 102:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 60, 42);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000000L, active2, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000L, active1, 0xc000800000000000L, active2, 0x40000300L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x4008000000000L, active1, 0x1000000200071c00L, active2, 0x1000822805L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000e00L, active1, 0L, active2, 0x10c0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000000L, active1, 0L, active2, 0x220000000L);
      case 78:
      case 110:
         if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(1, 89, 42);
         return jjMoveStringLiteralDfa2_0(active0, 0x2000040000001000L, active1, 0x2000000000001fL, active2, 0x1000010L);
      case 79:
      case 111:
         if ((active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 112, 42);
         return jjMoveStringLiteralDfa2_0(active0, 0x418000003020000L, active1, 0x40040480040L, active2, 0x8108404000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xc0000000000000L, active2, 0L);
      case 82:
      case 114:
         if ((active1 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x120010000800000L, active1, 0x1e000098000000L, active2, 0L);
      case 83:
      case 115:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(1, 69, 42);
         return jjMoveStringLiteralDfa2_0(active0, 0x80000004000L, active1, 0x300000000000000L, active2, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80000000000L, active2, 0x10000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000001c000000L, active1, 0x100120800000L, active2, 0xc0000L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x1f00000000000L, active1, 0L, active2, 0L);
      case 89:
      case 121:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000L, active1, 0x200000000000L, active2, 0x8L);
      case 124:
         if ((active2 & 0x2000000000000L) != 0L)
            return jjStopAtPos(1, 177);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2, 0L);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 41:
         if ((active2 & 0x800000000000000L) != 0L)
            return jjStopAtPos(2, 187);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2080100000100L, active2, 0x220000322L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x500000000000L, active2, 0L);
      case 67:
      case 99:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(2, 14, 42);
         else if ((active2 & 0x200000L) != 0L)
         {
            jjmatchedKind = 149;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x2000180020000000L, active1, 0x4000000000L, active2, 0x100000L);
      case 68:
      case 100:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(2, 7, 42);
         else if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(2, 12, 42);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 42, 42);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40000008000002L, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000c00000L, active1, 0xf100800000000000L, active2, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x1e00000000L, active1, 0x401000200L, active2, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L, active1, 0x210000000L, active2, 0x2000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000L, active1, 0x224000080000041L, active2, 0L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x2000000000L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400L, active2, 0L);
      case 76:
      case 108:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(2, 9, 42);
         return jjMoveStringLiteralDfa3_0(active0, 0x42002001000000L, active1, 0xc00008000840000L, active2, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000000L, active1, 0x800L, active2, 0x10000c0800L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000002000000L, active1, 0x8000b1004L, active2, 0x108824000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x120010000000000L, active1, 0L, active2, 0x404010c0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000L, active1, 0L, active2, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10000000000L, active2, 0L);
      case 82:
      case 114:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x1400001c000000L, active1, 0x8000L, active2, 0xc86010000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x2c000380000L, active1, 0x80203040000008L, active2, 0L);
      case 84:
      case 116:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(2, 86, 42);
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 105, 42);
         else if ((active2 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(2, 130, 42);
         else if ((active2 & 0x10L) != 0L)
         {
            jjmatchedKind = 132;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x18000c0030500L, active1, 0x20004010L, active2, 0x1000409L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000000L, active1, 0x18040000000000L, active2, 0x8000000000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000000L, active1, 0L, active2, 0x4000000000L);
      case 87:
      case 119:
         if ((active2 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(2, 143, 42);
         return jjMoveStringLiteralDfa3_0(active0, 0x800L, active1, 0L, active2, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x102000L, active2, 0x10000000L);
      case 89:
      case 121:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(2, 32, 42);
         else if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(2, 71, 42);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2, 0L);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x80240800800L, active1, 0x40000810000000L, active2, 0x4000021000L);
      case 66:
      case 98:
         if ((active2 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(3, 134, 42);
         else if ((active2 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(3, 135, 42);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x8080080000L);
      case 67:
      case 99:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 38, 42);
         return jjMoveStringLiteralDfa4_0(active0, 0x500000L, active1, 0x4000L, active2, 0x6000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200000000100L, active2, 0L);
      case 69:
      case 101:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 21, 42);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 41, 42);
         else if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 74, 42);
         else if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 115, 42);
         else if ((active2 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(3, 131, 42);
         else if ((active2 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 138, 42);
         else if ((active2 & 0x800L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x4091102c00000400L, active1, 0x8000842800000eL, active2, 0x3001040000L);
      case 71:
      case 103:
         if ((active2 & 0x4000L) != 0L)
         {
            jjmatchedKind = 142;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000L, active2, 0xb08000000L);
      case 72:
      case 104:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 17, 42);
         else if ((active2 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(3, 128, 42);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200000000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000008100L, active1, 0x2000040000800L, active2, 0x112000L);
      case 75:
      case 107:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 76, 42);
         else if ((active1 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 125, 42);
         break;
      case 76:
      case 108:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 54, 42);
         else if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 87, 42);
         else if ((active2 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(3, 133, 42);
         return jjMoveStringLiteralDfa4_0(active0, 0x400020000000L, active1, 0x400000040000L, active2, 0x20400000L);
      case 77:
      case 109:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 53, 42);
         else if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 114, 42);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80000000L, active2, 0L);
      case 78:
      case 110:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(3, 70, 42);
         else if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 111, 42);
         else if ((active1 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 126, 42);
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000000L, active1, 0x210040000000000L, active2, 0L);
      case 79:
      case 111:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(3, 68, 42);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4000000000L, active2, 0L);
      case 80:
      case 112:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 40, 42);
         break;
      case 81:
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20000000000000L, active2, 0L);
      case 82:
      case 114:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 58, 42);
         else if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 120, 42);
         else if ((active2 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(3, 129, 42);
         else if ((active2 & 0x100L) != 0L)
         {
            jjmatchedKind = 136;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x200080101c000000L, active1, 0x8000080100000000L, active2, 0x40000200L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x6200002000000L, active1, 0x100001000000L, active2, 0L);
      case 84:
      case 116:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 19, 42);
         else if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 73, 42);
         else if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 84, 42);
         else if ((active2 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 156, 42);
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000L, active1, 0x3000080001L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000001000000L, active1, 0xc00010000010000L, active2, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x22000L, active2, 0L);
      case 87:
      case 119:
         if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 124, 42);
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L, active1, 0L, active2, 0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x400800000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2, 0L);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x4000000000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0xc01000100000L, active1, 0x201080022000L, active2, 0x200L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000L, active1, 0L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10008000000000L, active2, 0x2000000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000000L, active1, 0x40000000000L, active2, 0L);
      case 69:
      case 101:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 29, 42);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 49, 42);
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(4, 79, 42);
         else if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 110, 42);
         else if ((active1 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 127, 42);
         else if ((active2 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 161, 42);
         else if ((active2 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(4, 163, 42);
         return jjMoveStringLiteralDfa5_0(active0, 0x200000001c010000L, active1, 0x400010001000000L, active2, 0x480000L);
      case 71:
      case 103:
         if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 121, 42);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x1000000L);
      case 72:
      case 104:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(4, 83, 42);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4000L, active2, 0x6000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x10008000000000L, active1, 0x40101L, active2, 0x480800000L);
      case 75:
      case 107:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(4, 22, 42);
         break;
      case 76:
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2000000000000L, active2, 0x8020000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000L, active1, 0x800000000L, active2, 0x100000L);
      case 78:
      case 110:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(4, 15, 42);
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000000L, active1, 0x4010000000L, active2, 0x12000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x100L, active1, 0L, active2, 0L);
      case 80:
      case 112:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 56, 42);
         return jjMoveStringLiteralDfa5_0(active0, 0x180000000000L, active1, 0L, active2, 0L);
      case 82:
      case 114:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(4, 10, 42);
         else if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(4, 66, 42);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(4, 91, 42);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 93, 42);
         return jjMoveStringLiteralDfa5_0(active0, 0x81000c00000000L, active1, 0x80002400000008L, active2, 0x60000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x1000000000L);
      case 84:
      case 116:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 50, 42);
         else if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(4, 75, 42);
         else if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 97, 42);
         else if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 107, 42);
         else if ((active2 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 140, 42);
         else if ((active2 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 158, 42);
         return jjMoveStringLiteralDfa5_0(active0, 0x800202002800000L, active1, 0x40100140010000L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000L, active1, 0x20000000000000L, active2, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x108000000L);
      case 88:
      case 120:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(4, 65, 42);
         break;
      case 89:
      case 121:
         return jjMoveStringLiteralDfa5_0(active0, 0x800L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2, 0L);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000040000000L, active1, 0x10000000000001L, active2, 0x10e500000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000L, active1, 0L, active2, 0x200L);
      case 68:
      case 100:
         if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 102, 42);
         return jjMoveStringLiteralDfa6_0(active0, 0x100000L, active1, 0L, active2, 0L);
      case 69:
      case 101:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(5, 23, 42);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 37, 42);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 43, 42);
         else if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(5, 80, 42);
         else if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(5, 99, 42);
         else if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 117, 42);
         else if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 118, 42);
         else if ((active2 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 167, 42);
         return jjMoveStringLiteralDfa6_0(active0, 0x10000L, active1, 0x500004000L, active2, 0x1000000L);
      case 71:
      case 103:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 36, 42);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 57, 42);
         else if ((active2 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(5, 144, 42);
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000000L, active1, 0L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x4800400000000000L, active1, 0x2002050000000L, active2, 0x20040000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000L, active1, 0x22000L, active2, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000000L, active1, 0L, active2, 0L);
      case 78:
      case 110:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(5, 8, 42);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(5, 24, 42);
         return jjMoveStringLiteralDfa6_0(active0, 0x100801c000000L, active1, 0x10000000100L, active2, 0x480800000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x4000000000L);
      case 82:
      case 114:
         if ((active2 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(5, 147, 42);
         return jjMoveStringLiteralDfa6_0(active0, 0xc02000000L, active1, 0x101080000000L, active2, 0L);
      case 83:
      case 115:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(5, 11, 42);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 45, 42);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 106, 42);
         else if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 122, 42);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40000L, active2, 0L);
      case 84:
      case 116:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(5, 67, 42);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(5, 88, 42);
         else if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 103, 42);
         else if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 119, 42);
         else if ((active2 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(5, 141, 42);
         else if ((active2 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 165, 42);
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000L, active1, 0x200000000000L, active2, 0x1000000000L);
      case 89:
      case 121:
         if ((active2 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(5, 145, 42);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2, 0L);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x4001000802000000L, active1, 0L, active2, 0x1080000000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x4000000000L);
      case 67:
      case 99:
         if ((active2 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(6, 146, 42);
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000L, active1, 0x12000000000L, active2, 0L);
      case 68:
      case 100:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(6, 78, 42);
         break;
      case 69:
      case 101:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(6, 20, 42);
         else if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 109, 42);
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000400000000L, active1, 0x40000L, active2, 0L);
      case 71:
      case 103:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(6, 72, 42);
         else if ((active2 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(6, 162, 42);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000L, active1, 0x100000000000L, active2, 0L);
      case 76:
      case 108:
         if ((active2 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(6, 148, 42);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1L, active2, 0L);
      case 78:
      case 110:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(6, 16, 42);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 46, 42);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 52, 42);
         else if ((active2 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(6, 150, 42);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2000400000000L, active2, 0x20000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40000000L, active2, 0L);
      case 82:
      case 114:
         if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(6, 96, 42);
         else if ((active2 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(6, 152, 42);
         else if ((active2 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 153;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x10c000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000L, active1, 0L, active2, 0L);
      case 84:
      case 116:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(6, 33, 42);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 47, 42);
         else if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 100, 42);
         else if ((active2 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(6, 151, 42);
         return jjMoveStringLiteralDfa7_0(active0, 0x88000001c000000L, active1, 0x10000000000000L, active2, 0x200L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x22000L, active2, 0L);
      case 89:
      case 121:
         if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(6, 95, 42);
         break;
      case 90:
      case 122:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2, 0L);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, active2, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 50:
         if ((active2 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(7, 154, 25);
         break;
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0x1c000000L, active1, 0L, active2, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x10000000L, active2, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000L, active1, 0L, active2, 0x100000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x400040000L, active2, 0x8000000L);
      case 68:
      case 100:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(7, 34, 42);
         break;
      case 69:
      case 101:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(7, 30, 42);
         else if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(7, 77, 42);
         else if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(7, 81, 42);
         else if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 104, 42);
         else if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 116, 42);
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000000000L, active1, 0L, active2, 0x200L);
      case 71:
      case 103:
         if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 113, 42);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000L, active1, 0L, active2, 0L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x4000000000L);
      case 76:
      case 108:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 48, 42);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1L, active2, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x1000000000L);
      case 78:
      case 110:
         if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(7, 94, 42);
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000000000L, active1, 0x100000000000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000000L, active1, 0L, active2, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x80000000L);
      case 84:
      case 116:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 39, 42);
         else if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 101, 42);
         else if ((active2 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(7, 157, 42);
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000000000L, active1, 0L, active2, 0L);
      case 89:
      case 121:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 59, 42);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, active2, 0L);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(6, old0, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, active2, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 55, 42);
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000L, active1, 0L, active2, 0L);
      case 69:
      case 101:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 62, 42);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x400000000L, active2, 0x4000000000L);
      case 71:
      case 103:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 108, 42);
         break;
      case 72:
      case 104:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x8000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x100000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000L, active1, 0L, active2, 0L);
      case 78:
      case 110:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 44, 42);
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000L, active1, 0L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x40000L, active2, 0L);
      case 80:
      case 112:
         if ((active2 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 164, 42);
         break;
      case 82:
      case 114:
         if ((active2 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(8, 137, 42);
         break;
      case 84:
      case 116:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 61, 42);
         return jjMoveStringLiteralDfa9_0(active0, 0x14000000L, active1, 0x10000000L, active2, 0L);
      case 89:
      case 121:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(8, 64, 42);
         else if ((active2 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(8, 159, 42);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, active2, 0L);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(7, old0, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, active2, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000L, active1, 0L, active2, 0x8000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x4000000000L);
      case 69:
      case 101:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(9, 35, 42);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x14000000L, active1, 0x10000000L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x40000L, active2, 0x100000000L);
      case 83:
      case 115:
         if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(9, 98, 42);
         break;
      case 84:
      case 116:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(9, 25, 42);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, active2, 0L);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(8, old0, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, active2, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x100000000L);
      case 68:
      case 100:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(10, 82, 42);
         break;
      case 77:
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0x14000000L, active1, 0L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x10000000L, active2, 0L);
      case 82:
      case 114:
         if ((active2 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(10, 155, 42);
         break;
      case 84:
      case 116:
         if ((active2 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 166, 25);
         return jjMoveStringLiteralDfa11_0(active0, 0x8000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, active2, 0L);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(9, old0, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1, active2, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(11, 27, 25);
         else if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 11;
         }
         return jjMoveStringLiteralDfa12_0(active0, 0x4000000L, active1, 0L, active2, 0L);
      case 78:
      case 110:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(11, 92, 42);
         break;
      case 82:
      case 114:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x100000000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1, active2, 0L);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(10, old0, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L, active2, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 83:
      case 115:
         return jjMoveStringLiteralDfa13_0(active0, 0x4000000L, active2, 0L);
      case 89:
      case 121:
         if ((active2 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(12, 160, 42);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L, active2, 0L);
}
private final int jjMoveStringLiteralDfa13_0(long old0, long active0, long old2, long active2)
{
   if (((active0 &= old0) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(11, old0, 0L, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L, 0L, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 84:
      case 116:
         return jjMoveStringLiteralDfa14_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L, 0L, 0L);
}
private final int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, 0L, 0L, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa15_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, 0L, 0L, 0L);
}
private final int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, 0L, 0L, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 77:
      case 109:
         return jjMoveStringLiteralDfa16_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, 0L, 0L, 0L);
}
private final int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, 0L, 0L, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 80:
      case 112:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(16, 26, 25);
         break;
      default :
         break;
   }
   return jjStartNfa_0(15, active0, 0L, 0L, 0L);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
//private final void jjCheckNAddStates(int start)
//{
//   jjCheckNAdd(jjnextStates[start]);
//   jjCheckNAdd(jjnextStates[start + 1]);
//}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   //int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 42;
   int i = 1;
   jjstateSet[0] = startState;
   //int j, 
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         //MatchLoop: 
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 168)
                        kind = 168;
                     jjCheckNAddStates(0, 6);
                  }
                  else if (curChar == 39)
                     jjCheckNAddStates(7, 9);
                  else if (curChar == 46)
                     jjCheckNAdd(14);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 6;
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 42:
               case 25:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 172)
                     kind = 172;
                  jjCheckNAdd(25);
                  break;
               case 0:
                  if (curChar == 45)
                     jjCheckNAddStates(10, 12);
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 3:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 6:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(7, 8);
                  break;
               case 7:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(7, 8);
                  break;
               case 8:
                  if (curChar == 42)
                     jjCheckNAddStates(13, 15);
                  break;
               case 9:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(10, 8);
                  break;
               case 10:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(10, 8);
                  break;
               case 11:
                  if (curChar == 47 && kind > 6)
                     kind = 6;
                  break;
               case 12:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 13:
                  if (curChar == 46)
                     jjCheckNAdd(14);
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 169)
                     kind = 169;
                  jjCheckNAddTwoStates(14, 15);
                  break;
               case 16:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(17);
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 169)
                     kind = 169;
                  jjCheckNAdd(17);
                  break;
               case 18:
                  if (curChar == 39)
                     jjCheckNAddStates(7, 9);
                  break;
               case 19:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 20:
                  if (curChar == 39)
                     jjCheckNAddStates(16, 18);
                  break;
               case 21:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(16, 18);
                  break;
               case 23:
                  if (curChar == 39 && kind > 171)
                     kind = 171;
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 168)
                     kind = 168;
                  jjCheckNAddStates(0, 6);
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 168)
                     kind = 168;
                  jjCheckNAdd(27);
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(28, 29);
                  break;
               case 29:
                  if (curChar == 46)
                     jjCheckNAdd(30);
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 169)
                     kind = 169;
                  jjCheckNAddTwoStates(30, 31);
                  break;
               case 32:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(33);
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 169)
                     kind = 169;
                  jjCheckNAdd(33);
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(34, 35);
                  break;
               case 36:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(37);
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 169)
                     kind = 169;
                  jjCheckNAdd(37);
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 169)
                     kind = 169;
                  jjCheckNAddTwoStates(38, 39);
                  break;
               case 40:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(41);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 169)
                     kind = 169;
                  jjCheckNAdd(41);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         //MatchLoop: 
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
               case 24:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 172)
                     kind = 172;
                  jjCheckNAddTwoStates(24, 25);
                  break;
               case 42:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 172)
                        kind = 172;
                     jjCheckNAdd(25);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 172)
                        kind = 172;
                     jjCheckNAddTwoStates(24, 25);
                  }
                  break;
               case 1:
                  jjAddStates(10, 12);
                  break;
               case 7:
                  jjCheckNAddTwoStates(7, 8);
                  break;
               case 9:
               case 10:
                  jjCheckNAddTwoStates(10, 8);
                  break;
               case 15:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(19, 20);
                  break;
               case 19:
                  jjCheckNAddStates(7, 9);
                  break;
               case 22:
                  jjCheckNAddStates(16, 18);
                  break;
               case 25:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 172)
                     kind = 172;
                  jjCheckNAdd(25);
                  break;
               case 31:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(21, 22);
                  break;
               case 35:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(23, 24);
                  break;
               case 39:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(25, 26);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         //MatchLoop: 
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(10, 12);
                  break;
               case 7:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(7, 8);
                  break;
               case 9:
               case 10:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(10, 8);
                  break;
               case 19:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(7, 9);
                  break;
               case 22:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(16, 18);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 42 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(0, 0);
}
private final int jjMoveNfa_1(int startState, int curPos)
{
   //int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 2;
   int i = 1;
   jjstateSet[0] = startState;
   //int j, 
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         //MatchLoop: 
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  kind = 196;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         //MatchLoop: 
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 196)
                     kind = 196;
                  jjCheckNAddTwoStates(0, 1);
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 196)
                     kind = 196;
                  jjCheckNAdd(1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         //int hiByte = (int)(curChar >> 8);
         //int i1 = hiByte >> 6;
         //long l1 = 1L << (hiByte & 077);
         //int i2 = (curChar & 0xff) >> 6;
         //long l2 = 1L << (curChar & 077);
         //MatchLoop: 
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 2 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 34:
         return jjStopAtPos(0, 197);
      default :
         return 1;
   }
}
static final int[] jjnextStates = {
   27, 28, 29, 34, 35, 38, 39, 19, 21, 23, 1, 2, 4, 8, 9, 11, 
   21, 22, 23, 16, 17, 32, 33, 36, 37, 40, 41, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, "\72\75", "\54", "\174\174", "\73", 
"\56", "\74", "\74\75", "\76", "\76\75", "\75", "\41\75", "\74\76", "\50\53\51", 
"\50", "\51", "\52", "\57", "\53", "\55", "\77", "\42", null, "\42", };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "STATE_QuotedIdentStart", 
   "STATE_QuotedIdentEnd", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2, 0, 
};
static final long[] jjtoToken = {
   0xffffffffffffff81L, 0xffffffffffffffffL, 0xffff9bffffffffffL, 0x3fL, 
};
static final long[] jjtoSkip = {
   0x7eL, 0x0L, 0x0L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[42];
private final int[] jjstateSet = new int[84];
protected char curChar;
public AxionSqlParserTokenManager(SimpleCharStream stream)
{
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public AxionSqlParserTokenManager(SimpleCharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 42; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 3 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  //int kind;
  //Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   switch(curLexState)
   {
     case 0:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       break;
     case 2:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_2();
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}

