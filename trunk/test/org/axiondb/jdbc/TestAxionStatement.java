/*
 * $Id: TestAxionStatement.java,v 1.1 2007/11/28 10:01:37 jawed Exp $
 * =======================================================================
 * Copyright (c) 2002-2003 Axion Development Team.  All rights reserved.
 *  
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met:
 * 
 * 1. Redistributions of source code must retain the above 
 *    copyright notice, this list of conditions and the following 
 *    disclaimer. 
 *   
 * 2. Redistributions in binary form must reproduce the above copyright 
 *    notice, this list of conditions and the following disclaimer in 
 *    the documentation and/or other materials provided with the 
 *    distribution. 
 *   
 * 3. The names "Tigris", "Axion", nor the names of its contributors may 
 *    not be used to endorse or promote products derived from this 
 *    software without specific prior written permission. 
 *  
 * 4. Products derived from this software may not be called "Axion", nor 
 *    may "Tigris" or "Axion" appear in their names without specific prior
 *    written permission.
 *   
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * =======================================================================
 */

package org.axiondb.jdbc;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import junit.framework.Test;
import junit.framework.TestSuite;

/**
 * @version $Revision: 1.1 $ $Date: 2007/11/28 10:01:37 $
 * @author Chuck Burdick
 */
public class TestAxionStatement extends AxionTestCaseSupport {

    public TestAxionStatement(String testName) {
        super(testName);
    }

    public static Test suite() {
        return new TestSuite(TestAxionStatement.class);
    }

    public void setUp() throws Exception {
        super.setUp();
        _stmt = getConnection().createStatement();
        _stmt.execute("create table foo ( id integer )");
        _stmt.execute("insert into foo ( id ) values ( 1 )");
        _stmt.execute("insert into foo ( id ) values ( 2 )");
        
        _stmt.execute("create table employees (id int, name varchar(25))");
    }

    public void tearDown() throws Exception {
        try { _stmt.close(); } catch (Exception e) {}
        _stmt = null;
        super.tearDown();
    }

    protected Statement getQueryStatement() {
        return _stmt;
    }

    protected Statement getInsertStatement() {
        return _stmt;
    }

    protected ResultSet executeQuery() throws SQLException {
        return _stmt.executeQuery(QUERY);
    }

    protected boolean executeQueryViaExecute() throws SQLException {
        return _stmt.execute(QUERY);
    }

    protected boolean executeInsertViaExecute() throws SQLException {
        return _stmt.execute(INSERT);
    }

    public void testCreateStatement() throws Exception {
        assertNotNull("Statement should not be null", getQueryStatement());
    }    

    public void testCancelIsNotSupported() throws Exception {
        try {
            _stmt.cancel();
            fail("Expected SQLException");
        } catch(SQLException e) {
            // expected
        }
    }    

    public void testExecuteWithAutoGeneratedKeys() throws Exception {
        assertTrue(_stmt.execute("select * from foo",Statement.NO_GENERATED_KEYS));
    }    

    public void testExecuteWithAutoGeneratedKeys2() throws Exception {
        try {
            _stmt.execute("select * from foo",Statement.RETURN_GENERATED_KEYS);
            fail("Expected SQLException");
        } catch(SQLException e) {
            // expected
        }
    }    

    public void testGetGeneratedKeys() throws Exception {
        ResultSet rset = _stmt.getGeneratedKeys();
        assertNotNull(rset);
        assertTrue(! rset.next());
        rset.close();
    }    

    public void testGetWarningsAndClearWarnings() throws Exception {
        assertNull(_stmt.getWarnings());
        _stmt.clearWarnings();
        assertNull(_stmt.getWarnings());
    }    

    public void testGetFetchDirection() throws Exception {
        assertEquals(ResultSet.FETCH_FORWARD,_stmt.getFetchDirection());
    }    

    public void testSetInvalidFetchDirection() throws Exception {
        int invalidFetchDirection = ResultSet.FETCH_FORWARD + ResultSet.FETCH_REVERSE + ResultSet.FETCH_UNKNOWN;
        try {
            _stmt.setFetchDirection(invalidFetchDirection);
            fail("Expected SQLException");
        } catch(SQLException e) {
            // expected
        }
    }    

    public void testSetFetchDirection() throws Exception {
        _stmt.setFetchDirection(ResultSet.FETCH_FORWARD);
        _stmt.setFetchDirection(ResultSet.FETCH_REVERSE);
        _stmt.setFetchDirection(ResultSet.FETCH_UNKNOWN);
    }    

    public void testGetSetFetchSize() throws Exception {
        assertEquals(0,_stmt.getFetchSize());
        _stmt.setFetchSize(0);
        assertEquals(0,_stmt.getFetchSize());
    }    

    public void testSetInvalidFetchSize() throws Exception {
        try {
            _stmt.setFetchSize(-1);
            fail("Expected SQLException");
        } catch(SQLException e) {
            // expected
        }
    }    

    public void testGetSetMaxFieldSize() throws Exception {
        assertEquals(0,_stmt.getMaxFieldSize());
        _stmt.setMaxFieldSize(0);
        assertEquals(0,_stmt.getMaxFieldSize());
        try {
            _stmt.setMaxFieldSize(-1);
            fail("Expected SQLException");
        } catch(SQLException e) {
            // expected
        }
        assertEquals(0,_stmt.getMaxFieldSize());
        try {
            _stmt.setMaxFieldSize(100); // currently not supported
            fail("Expected SQLException");
        } catch(SQLException e) {
            // expected
        }
        assertEquals(0,_stmt.getMaxFieldSize());
    }    

    public void testSetCursorNameIsSafe() throws Exception {
        // "If the database doesn't suport positioned update/delete, this method is a noop."
        _stmt.setCursorName("foo");
    }    

    public void testGetSetQueryTimeout() throws Exception {
        assertEquals(0,_stmt.getQueryTimeout());
        _stmt.setQueryTimeout(0);
        try {
            _stmt.setQueryTimeout(-1);
            fail("Expected SQLException");
        } catch(SQLException e) {
            // expected
        }
        assertEquals(0,_stmt.getQueryTimeout());
        try {
            _stmt.setQueryTimeout(100); // currently not supported
            fail("Expected SQLException");
        } catch(SQLException e) {
            // expected
        }
        assertEquals(0,_stmt.getQueryTimeout());
    }    

    public void testGetResultSetType() throws Exception {
        assertEquals(ResultSet.TYPE_FORWARD_ONLY,_stmt.getResultSetType());
    }    

    public void testGetResultSetConcurrency() throws Exception {
        assertEquals(ResultSet.CONCUR_READ_ONLY,_stmt.getResultSetConcurrency());
    }    

    public void testSetEscapeProcessing() throws Exception {
        _stmt.setEscapeProcessing(true);
        try {
            _stmt.setEscapeProcessing(false); // currently not supported
            fail("Expected SQLException");
        } catch(SQLException e) {
            // expected
        }
    }    

    public void testGetAndSetMaxRows() throws Exception {
        Statement stmt = getQueryStatement();
        assertEquals(0,stmt.getMaxRows());
        stmt.setMaxRows(100);
        assertEquals(100,stmt.getMaxRows());
        stmt.setMaxRows(3);
        assertEquals(3,stmt.getMaxRows());
        try {
            stmt.setMaxRows(-1);
            fail("Expected SQLException");
        } catch(SQLException e) {
            // expected
        }
        assertEquals(3,stmt.getMaxRows());
    }    


    public void testDoubleClose() throws Exception {
        Statement stmt = getQueryStatement();
        stmt.close();
        stmt.close();
    }

    public void testResultSetIsClosedByGetMoreResults() throws SQLException {
        ResultSet rset = executeQuery();
        assertTrue(rset.next());
        assertTrue(!(getQueryStatement().getMoreResults()));
        try {
            rset.next();
            fail("Expected SQLException");
        } catch (SQLException e) {
            // expected
        }
    }

    public void testResultSetIsClosedByStatementClose() throws SQLException {
        ResultSet rset = executeQuery();
        assertTrue(rset.next());
        getQueryStatement().close();
        try {
            rset.next();
            fail("Expected SQLException");
        } catch (SQLException e) {
            // expected
        }
    }

    public void testGetMoreResultsAfterQuery() throws SQLException {
        assertTrue(executeQueryViaExecute());
        assertEquals(-1,getQueryStatement().getUpdateCount());
        assertNotNull(getQueryStatement().getResultSet());
        assertTrue( ! getQueryStatement().getMoreResults() );
        assertEquals(-1,getQueryStatement().getUpdateCount());
        assertNull(getQueryStatement().getResultSet());
    }

    public void testGetMoreResultsAfterInsert() throws SQLException {
        assertTrue(! executeInsertViaExecute());
        assertEquals(1,getInsertStatement().getUpdateCount());
        assertNull(getInsertStatement().getResultSet());
        assertTrue( ! getInsertStatement().getMoreResults() );
        assertEquals(-1,getInsertStatement().getUpdateCount());
        assertNull(getInsertStatement().getResultSet());
    }
    
    
    public void testExecuteStatementWithNoResultSetFailure() throws Exception {
        try {
            _stmt.executeQuery(INSERT);
            fail("Expected SQLException; associated statement does not return a ResultSet.");
        } catch (SQLException e) {
            // expected
        }
    }
    
    private Statement _stmt = null;
    protected static final String QUERY = "SELECT * FROM FOO";
    protected static final String INSERT = "INSERT INTO FOO VALUES ( 3 )";
}
