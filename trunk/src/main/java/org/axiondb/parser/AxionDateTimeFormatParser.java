/* Generated By:JavaCC: Do not edit this line. AxionDateTimeFormatParser.java */
package org.axiondb.parser;

import org.axiondb.AxionException;

import java.io.StringReader;
import java.util.HashSet;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * JavaCC generated date/time format string parser.
 * Generated from AxionDateTimeFormatParser.jj ().
 * Do not edit this (.java) file directly, it is programmatically generated.
 *
 * @author Jonathan Giron
 */
public class AxionDateTimeFormatParser implements AxionDateTimeFormatParserConstants {

    public AxionDateTimeFormatParser() {
        this(new StringReader(""));
        _log.log(Level.FINE,"Created new date/time format parser");
    }

    public String parseDateTimeFormatToJava(String dtPattern) throws AxionException {
        this.ReInit(new StringReader(dtPattern));

        try {
            return this.convertToJavaFormat();
        } catch (TokenMgrError e) {
            throw new AxionException(22007);
        } catch (ParseException ex) {
            throw new AxionException(22007);
        }
    }

    private void assertTokenImageNotInSet(String image, Set existingTokens) throws ParseException {
        if (existingTokens.contains(image.toLowerCase())) {
            throw new ParseException("Duplicate token " + image + " found in parsed string.");
        } else {
            existingTokens.add(image.toLowerCase());
        }
    }

    private static Logger _log = Logger.getLogger(AxionDateTimeFormatParser.class.getName());

    // ----------------------------------------------------------------------------
    // DATE/TIME FORMAT GRAMMAR
    // ----------------------------------------------------------------------------
  final public String convertToJavaFormat() throws ParseException {
            StringBuffer buf = new StringBuffer(50);
            HashSet existingTokens = new HashSet();
            //Token s = null;
            Token t = null;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WEEKDAY3:
        t = jj_consume_token(WEEKDAY3);
                        buf.append("EEE");
                        assertTokenImageNotInSet(t.image, existingTokens);
        break;
      case WEEKDAY_FULL:
        t = jj_consume_token(WEEKDAY_FULL);
                        buf.append("EEEE");
                        assertTokenImageNotInSet(t.image, existingTokens);
        break;
      case JULIAN_DAY:
        t = jj_consume_token(JULIAN_DAY);
                        buf.append("DDD");
                        assertTokenImageNotInSet(t.image, existingTokens);
        break;
      case DAY:
        t = jj_consume_token(DAY);
                        buf.append("dd");
                        assertTokenImageNotInSet(t.image, existingTokens);
        break;
      case MONTH:
        t = jj_consume_token(MONTH);
                                buf.append("MM");
                        assertTokenImageNotInSet(t.image, existingTokens);
        break;
      case MONTH_FULL:
        t = jj_consume_token(MONTH_FULL);
                                buf.append("MMMM");
                        assertTokenImageNotInSet(t.image, existingTokens);
        break;
      case MONTH_3:
        t = jj_consume_token(MONTH_3);
                                buf.append("MMM");
                        assertTokenImageNotInSet(t.image, existingTokens);
        break;
      case YEAR:
        t = jj_consume_token(YEAR);
                                buf.append("yyyy");
                        assertTokenImageNotInSet(t.image, existingTokens);
        break;
      case YEAR_2:
        t = jj_consume_token(YEAR_2);
                                buf.append("yy");
                        assertTokenImageNotInSet(t.image, existingTokens);
                        assertTokenImageNotInSet("yyyy", existingTokens);
        break;
      case ERA:
        t = jj_consume_token(ERA);
                        buf.append("G");
                        assertTokenImageNotInSet(t.image, existingTokens);
        break;
      case HOUR12:
      case HOUR12_PADDED:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case HOUR12:
          t = jj_consume_token(HOUR12);
          break;
        case HOUR12_PADDED:
          t = jj_consume_token(HOUR12_PADDED);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
                        buf.append("hh");
                        assertTokenImageNotInSet(t.image, existingTokens);
        break;
      case HOUR24_PADDED:
        t = jj_consume_token(HOUR24_PADDED);
                        buf.append("HH");
                        assertTokenImageNotInSet(t.image, existingTokens);
        break;
      case HOUR24:
        t = jj_consume_token(HOUR24);
                        buf.append("H");
                        assertTokenImageNotInSet(t.image, existingTokens);
        break;
      case MINUTE:
        t = jj_consume_token(MINUTE);
                        buf.append("mm");
                        assertTokenImageNotInSet(t.image, existingTokens);
        break;
      case SECOND:
        t = jj_consume_token(SECOND);
                        buf.append("ss");
                        assertTokenImageNotInSet(t.image, existingTokens);
        break;
      case WEEK:
        t = jj_consume_token(WEEK);
                        buf.append("w");
                        assertTokenImageNotInSet(t.image, existingTokens);
        break;
      case MILLISECOND:
        t = jj_consume_token(MILLISECOND);
                        buf.append("SSS");
                        assertTokenImageNotInSet(t.image, existingTokens);
        break;
      case AMPM:
        t = jj_consume_token(AMPM);
                        buf.append("aa");
                        assertTokenImageNotInSet(t.image, existingTokens);
        break;
      case WEEKDAY:
      case QUARTER:
      case COMMA:
      case COLON:
      case SEMICOLON:
      case DOT:
      case OPENPAREN:
      case CLOSEPAREN:
      case DASH:
      case SOLIDUS:
      case WS:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          t = jj_consume_token(COMMA);
          break;
        case COLON:
          t = jj_consume_token(COLON);
          break;
        case SEMICOLON:
          t = jj_consume_token(SEMICOLON);
          break;
        case OPENPAREN:
          t = jj_consume_token(OPENPAREN);
          break;
        case CLOSEPAREN:
          t = jj_consume_token(CLOSEPAREN);
          break;
        case DASH:
          t = jj_consume_token(DASH);
          break;
        case WS:
          t = jj_consume_token(WS);
          break;
        case SOLIDUS:
          t = jj_consume_token(SOLIDUS);
          break;
        case DOT:
          t = jj_consume_token(DOT);
          break;
        case QUARTER:
          t = jj_consume_token(QUARTER);
          break;
        case WEEKDAY:
          t = jj_consume_token(WEEKDAY);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
                        buf.append(t.image);
        break;
      case ISO9660_T:
        t = jj_consume_token(ISO9660_T);
                    buf.append("'T'");
                        assertTokenImageNotInSet(t.image, existingTokens);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WEEKDAY:
      case WEEKDAY3:
      case WEEKDAY_FULL:
      case JULIAN_DAY:
      case DAY:
      case MONTH:
      case MONTH_3:
      case MONTH_FULL:
      case YEAR:
      case YEAR_2:
      case ERA:
      case HOUR12:
      case HOUR24:
      case HOUR12_PADDED:
      case HOUR24_PADDED:
      case MINUTE:
      case SECOND:
      case WEEK:
      case QUARTER:
      case MILLISECOND:
      case AMPM:
      case COMMA:
      case COLON:
      case SEMICOLON:
      case DOT:
      case OPENPAREN:
      case CLOSEPAREN:
      case DASH:
      case SOLIDUS:
      case ISO9660_T:
      case WS:
        ;
        break;
      default:
        break label_1;
      }
    }
                        {if (true) return buf.toString();}
    throw new Error("Missing return statement in function");
  }

  public AxionDateTimeFormatParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;

  public AxionDateTimeFormatParser(java.io.InputStream stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AxionDateTimeFormatParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  public AxionDateTimeFormatParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AxionDateTimeFormatParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  public AxionDateTimeFormatParser(AxionDateTimeFormatParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
  }

  public void ReInit(AxionDateTimeFormatParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      return token;
    }
    token = oldToken;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  public ParseException generateParseException() {
    Token errortok = token.next;
    int line = errortok.beginLine, column = errortok.beginColumn;
    String mess = (errortok.kind == 0) ? tokenImage[0] : errortok.image;
    return new ParseException("Parse error at line " + line + ", column " + column + ".  Encountered: " + mess);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

}

